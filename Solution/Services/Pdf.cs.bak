using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using BusinessObjects;
using BusinessLogicLayer;
using Services;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.IO;
using System.Text;
using System.Collections;
using System.Threading;
using System.Diagnostics;

namespace Services
{
    public class Pdf
    {

        private static string GetAutoPrintJs(string printername)
        {
            var script = new StringBuilder();
            //script.Append("app.execMenuItem('FullScreen');");
            script.Append("app.fs.isFullScreen = true;");
            script.Append("var pp = this.getPrintParams();");
            //script.Append("pp.interactive= pp.constants.interactionLevel.full;");
            script.Append("pp.interactive = pp.constants.interactionLevel.silent;");
            // Select which printer to print to
            if (!string.IsNullOrEmpty(printername))
                script.Append(@"pp.printerName = '" + printername + "';");
            script.Append("this.print(pp);");
            script.Append("this.closeDoc(true);");
            return script.ToString();
        }


        public static string PdfFAC(Comprobante fac, Formato formato, string hojaruta,string path,  bool autoprint,  string impresora)
        {
            //string pdfTemplate = path + @"\FAC.pdf";
            string pdfTemplate = path + @"\" + formato.for_pdf;
            string newFile = path + @"\" + fac.com_doctran + ".pdf";


            PdfReader pdfReader = new PdfReader(pdfTemplate);
            PdfStamper pdfStamper = new PdfStamper(pdfReader, new FileStream(newFile, FileMode.Create));
            AcroFields pdfFormFields = pdfStamper.AcroFields;
            if (autoprint)
            {
                var writer = pdfStamper.Writer;
                PdfAction js = PdfAction.JavaScript(GetAutoPrintJs(impresora), writer);
                writer.AddJavaScript(js);          //IMPRESION AUTOMATICA
            }

            // set form pdfFormFields
            // The first worksheet and W-4 form
            pdfFormFields.SetField("numero", fac.com_doctran);

            DateTime ahora = DateTime.Now;
            pdfFormFields.SetField("fechacrea", string.Format("{0:00}/{1:00}/{2:0000} {3:00}:{4:00}:{5:00}", ahora.Day, ahora.Month, ahora.Year, ahora.Hour, ahora.Minute, ahora.Second));
            pdfFormFields.SetField("usuario", fac.crea_usr);
            pdfFormFields.SetField("nombreusuario", fac.crea_usrnombres);

            pdfFormFields.SetField("fecha", fac.com_fecha.ToLongDateString());
            pdfFormFields.SetField("cliente", fac.ccomdoc.cdoc_nombre);
            pdfFormFields.SetField("ruc", fac.ccomdoc.cdoc_ced_ruc);
            pdfFormFields.SetField("direccion", fac.ccomdoc.cdoc_direccion);
            pdfFormFields.SetField("telefono", fac.ccomdoc.cdoc_telefono);

            pdfFormFields.SetField("destinatario", fac.ccomenv.cenv_apellidos_des + " " + fac.ccomenv.cenv_nombres_des);
            pdfFormFields.SetField("direcciondes", fac.ccomenv.cenv_direccion_des);
            pdfFormFields.SetField("ciudaddes", fac.ccomenv.cenv_rutadestino);
            pdfFormFields.SetField("remitente", fac.ccomenv.cenv_apellidos_rem + " " + fac.ccomenv.cenv_nombres_rem);
            pdfFormFields.SetField("propietario", fac.ccomenv.cenv_nombres_soc);
            pdfFormFields.SetField("conductor", fac.ccomenv.cenv_nombres_cho);

            decimal totalcantidad = 0;
            foreach (Dcomdoc item in fac.ccomdoc.detalle)
            {
                totalcantidad += item.ddoc_cantidad;
                pdfFormFields.SetField("cantidad", pdfFormFields.GetField("cantidad") + item.ddoc_cantidad.ToString("0") + Environment.NewLine);
                string observaciones = item.ddoc_productonombre + " " + item.ddoc_observaciones;
                int largo = 0;
                do
                {
                    string objsimp = observaciones;
                    largo = objsimp.Length;
                    if (largo > 200)
                    {
                        objsimp = observaciones.Substring(0, 200);
                        observaciones = observaciones.Replace(objsimp, "");
                    }
                    //pdfFormFields.SetField("descripcion", pdfFormFields.GetField("descripcion") + item.ddoc_productonombre + " " + item.ddoc_observaciones + Environment.NewLine);
                    pdfFormFields.SetField("descripcion", pdfFormFields.GetField("descripcion") + objsimp + Environment.NewLine);
                }
                while (largo > 200);

                List<Dcalculoprecio> lstdc = DcalculoprecioBLL.GetAll(new WhereParams("dcpr_empresa={0} and dcpr_comprobante={1} and dcpr_dcomdoc={2}", item.ddoc_empresa, item.ddoc_comprobante, item.ddoc_secuencia), "");

                string peso = "";
                string preciou = item.ddoc_precio.ToString("0.00");
                foreach (Dcalculoprecio dc in lstdc)
                {
                    peso += dc.dcpr_indicedigitado + Environment.NewLine;
                    if (dc.dcpr_valor.HasValue)
                        preciou = dc.dcpr_valor.Value.ToString("0.00") + Environment.NewLine;
                }


                pdfFormFields.SetField("peso", pdfFormFields.GetField("peso") + peso + Environment.NewLine);
                //pdfFormFields.SetField("valorunitario", pdfFormFields.GetField("valorunitario") + item.ddoc_precio.ToString("0.00") + Environment.NewLine);
                pdfFormFields.SetField("valorunitario", pdfFormFields.GetField("valorunitario") + preciou + Environment.NewLine);
                pdfFormFields.SetField("valortotal", pdfFormFields.GetField("valortotal") + item.ddoc_total.ToString("0.00") + Environment.NewLine);
            }

            pdfFormFields.SetField("totalcantidad", totalcantidad.ToString("0"));
            pdfFormFields.SetField("valordeclarado", (fac.total.tot_vseguro.HasValue) ? fac.total.tot_vseguro.Value.ToString("0.00") : "");
            pdfFormFields.SetField("valorseguro", (fac.total.tot_tseguro.HasValue) ? fac.total.tot_tseguro.Value.ToString("0.00") : "");
            pdfFormFields.SetField("transporte", fac.total.tot_transporte.ToString("0.00"));
            pdfFormFields.SetField("guia", fac.ccomenv.cenv_guia1 + "-" + fac.ccomenv.cenv_guia2 + "-" + fac.ccomenv.cenv_guia3);
            pdfFormFields.SetField("politica", fac.ccomdoc.cdoc_politicanombre);
            pdfFormFields.SetField("entrega", fac.ccomenv.cenv_observacion);
            pdfFormFields.SetField("hojaruta", hojaruta);


            decimal subtotal = fac.total.tot_subtot_0 + fac.total.tot_subtotal;

            pdfFormFields.SetField("subtotal0", fac.total.tot_subtot_0.ToString("0.00"));
            pdfFormFields.SetField("subtotal12", fac.total.tot_subtotal.ToString("0.00"));
            pdfFormFields.SetField("subtotal", subtotal.ToString("0.00"));
            pdfFormFields.SetField("iva", fac.total.tot_timpuesto.ToString("0.00"));
            pdfFormFields.SetField("total", fac.total.tot_total.ToString("0.00"));


            // report by reading values from completed PDF
            pdfStamper.FormFlattening = false;

            // close the pdf
            pdfStamper.Close();
            return fac.com_doctran + ".pdf";
        }


        public static string PdfFACTC(Comprobante fac, Formato formato, string hojaruta, string path, bool autoprint, string impresora)
        {
            string pdfTemplate = path + @"\" + formato.for_pdf;
            string newFile = path + @"\" + fac.com_doctran + ".pdf";

            FileStream fs = new FileStream(newFile, FileMode.Create, FileAccess.Write, FileShare.None);

            Persona pe = PersonaBLL.GetByPK(new Persona { per_codigo = int.Parse((fac.com_agente.HasValue) ? fac.com_agente.ToString() : "0"), per_empresa = int.Parse(fac.com_empresa.ToString()), per_codigo_key = int.Parse((fac.com_agente.HasValue) ? fac.com_agente.ToString() : "0"), per_empresa_key = int.Parse(fac.com_empresa.ToString()) });
            PdfReader pdfReader = new PdfReader(pdfTemplate);
            // PdfStamper pdfStamper = new PdfStamper(pdfReader, new FileStream(newFile, FileMode.Create));
            PdfStamper pdfStamper = new PdfStamper(pdfReader, fs);
            AcroFields pdfFormFields = pdfStamper.AcroFields;
            //inicio creacion de la tabla

            foreach (KeyValuePair<string, AcroFields.Item> kvp in pdfFormFields.Fields)
            {

                pdfFormFields.SetFieldProperty(kvp.Key, "textsize", 7f, null);

                pdfFormFields.SetFieldProperty(kvp.Key, "setfflags", PdfFormField.MK_CAPTION_LEFT, null);

                pdfFormFields.SetFieldProperty(kvp.Key, "setfflags", PdfFormField.FF_READ_ONLY, null);

                if (kvp.Key.IndexOf("DescripciónRow") >= 0)
                {

                    //pdfFormFields.SetFieldProperty(kvp.Key, "textsize", f, null);

                    pdfFormFields.SetFieldProperty(kvp.Key, "fflags", PdfFormField.FF_MULTILINE, null);

                }
            }
            iTextSharp.text.Font fntTableFontHdr = FontFactory.GetFont("Arial", 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            iTextSharp.text.Font fntTableFont = FontFactory.GetFont("Arial", 8, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);


            PdfPTable Table = new PdfPTable(5);
            Table.WidthPercentage = 100;
            Table.HorizontalAlignment = 0;
            Table.SpacingAfter = 10;

            float[] sglTblHdWidths = new float[5];
            sglTblHdWidths[0] = 300f;
            sglTblHdWidths[1] = 300f;
            sglTblHdWidths[2] = 100f;
            sglTblHdWidths[3] = 100f;
            sglTblHdWidths[4] = 100f;
            Table.SetWidths(sglTblHdWidths);

            //ENCABEZADO
            PdfPCell CellOneHdr = new PdfPCell(new Phrase("PRODUCTO", fntTableFontHdr));

            Table.AddCell(CellOneHdr);
            PdfPCell CellTwoHdr = new PdfPCell(new Phrase("OBSERVACIONES", fntTableFontHdr));

            Table.AddCell(CellTwoHdr);
            PdfPCell CellTreeHdr = new PdfPCell(new Phrase("VOLUMEN", fntTableFontHdr));
            CellTreeHdr.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
            Table.AddCell(CellTreeHdr);
            PdfPCell CellOne = new PdfPCell(new Phrase("VALOR", fntTableFontHdr));
            CellOne.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
            Table.AddCell(CellOne);
            PdfPCell CellTwo = new PdfPCell(new Phrase("TOTAL", fntTableFontHdr));
            CellTwo.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
            Table.AddCell(CellTwo);
            //FIN DE ENCABEZADO








            //fin de creacion de tabla


            if (autoprint)
            {
                var writer = pdfStamper.Writer;
                PdfAction js = PdfAction.JavaScript(GetAutoPrintJs(impresora), writer);
                writer.AddJavaScript(js);          //IMPRESION AUTOMATICA
            }

            // set form pdfFormFields
            // The first worksheet and W-4 form
            //pdfFormFields.SetField("numero", fac.com_doctran);

            DateTime ahora = DateTime.Now;
            pdfFormFields.SetField("lugarfecha","Cuenca "+ string.Format("{0:00}/{1:00}/{2:0000}", ahora.Day, ahora.Month, ahora.Year));
           // pdfFormFields.SetField("fechacrea", string.Format("{0:00}/{1:00}/{2:0000} {3:00}:{4:00}:{5:00}", ahora.Day, ahora.Month, ahora.Year, ahora.Hour, ahora.Minute, ahora.Second));
          //  pdfFormFields.SetField("usuario", fac.crea_usr);
            //pdfFormFields.SetField("nombreusuario", fac.crea_usrnombres);
            pdfFormFields.SetField("placas", fac.com_concepto);
            pdfFormFields.SetField("fecha", fac.com_fecha.ToLongDateString());
            pdfFormFields.SetField("cliente", fac.ccomdoc.cdoc_nombre);
            pdfFormFields.SetField("ruc", fac.ccomdoc.cdoc_ced_ruc);
            pdfFormFields.SetField("direccion", fac.ccomdoc.cdoc_direccion);
            pdfFormFields.SetField("telefono", fac.ccomdoc.cdoc_telefono);
            pdfFormFields.SetField("nroguia", fac.ccomenv.cenv_guias.ToString());
            pdfFormFields.SetField("destinatario", fac.ccomenv.cenv_apellidos_des + " " + fac.ccomenv.cenv_nombres_des);
            pdfFormFields.SetField("direcciondes", fac.ccomenv.cenv_direccion_des);
            pdfFormFields.SetField("ciudaddes", fac.ccomenv.cenv_rutadestino);
            pdfFormFields.SetField("remitente", fac.ccomenv.cenv_apellidos_rem + " " + fac.ccomenv.cenv_nombres_rem);
            pdfFormFields.SetField("propietario", fac.ccomenv.cenv_nombres_soc);
            pdfFormFields.SetField("conductor", fac.ccomenv.cenv_nombres_cho);
            pdfFormFields.SetField("vendedor", pe.per_nombres+" "+pe.per_apellidos);







            decimal total = 0;
            decimal totalcantidad = 0;
            foreach (Dcomdoc item in fac.ccomdoc.detalle)
            {

                total = total + item.ddoc_total;
                totalcantidad = totalcantidad + item.ddoc_cantidad;
                PdfPCell Cell1 = new PdfPCell(new Phrase(item.ddoc_productonombre, fntTableFont));
                Cell1.FixedHeight = 25.0f;
                Table.AddCell(Cell1);
                PdfPCell Cell2 = new PdfPCell(new Phrase(item.ddoc_observaciones, fntTableFont));
                Cell2.FixedHeight = 25.0f;
                Table.AddCell(Cell2);
                PdfPCell Cell3 = new PdfPCell(new Phrase(item.ddoc_cantidad.ToString("0.00"), fntTableFont));
                Cell3.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
                Cell3.FixedHeight = 25.0f;
                Table.AddCell(Cell3);
                PdfPCell Cell4 = new PdfPCell(new Phrase(item.ddoc_precio.ToString().Replace(',', '.'), fntTableFont));
                Cell4.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
                Cell4.FixedHeight = 25.0f;
                Table.AddCell(Cell4);
                PdfPCell Cell5 = new PdfPCell(new Phrase(item.ddoc_total.ToString("0.00"), fntTableFont));
                Cell5.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
                Cell5.FixedHeight = 25.0f;
                Table.AddCell(Cell5);


            }

            PdfPCell Cellt = new PdfPCell(new Phrase("TOTAL", fntTableFontHdr));
            Cellt.FixedHeight = 25.0f;
            Table.AddCell(Cellt);
            PdfPCell Cell2t = new PdfPCell(new Phrase("", fntTableFontHdr));
            Cell2t.FixedHeight = 25.0f;
            Table.AddCell(Cell2t);
            PdfPCell Cell3t = new PdfPCell(new Phrase(totalcantidad.ToString("0.00"), fntTableFontHdr));
            Cell3t.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
            Cell3t.FixedHeight = 25.0f;
            Table.AddCell(Cell3t);
            PdfPCell Cell4t = new PdfPCell(new Phrase("", fntTableFontHdr));
            Cell4t.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
            Cell4t.FixedHeight = 25.0f;
            Table.AddCell(Cell4t);
            PdfPCell Cell5t = new PdfPCell(new Phrase(total.ToString("0.00"), fntTableFontHdr));
            Cell5t.HorizontalAlignment = iTextSharp.text.Element.ALIGN_CENTER;
            Cell5t.FixedHeight = 25.0f;
            Table.AddCell(Cell5t);



            var cb = pdfStamper.GetOverContent(1);
            var ct = new ColumnText(cb);
            ct.Alignment = Element.ALIGN_CENTER;
            ct.SetSimpleColumn(36, 36, PageSize.A4.Width - 36, PageSize.A4.Height - 330);
            ct.AddElement(Table);
            ct.Go();
            pdfFormFields.SetField("totalcantidad", totalcantidad.ToString("0"));
            pdfFormFields.SetField("valordeclarado", (fac.total.tot_vseguro.HasValue) ? fac.total.tot_vseguro.Value.ToString("0.00") : "");
            pdfFormFields.SetField("valorseguro", (fac.total.tot_tseguro.HasValue) ? fac.total.tot_tseguro.Value.ToString("0.00") : "");
            pdfFormFields.SetField("transporte", fac.total.tot_transporte.ToString("0.00"));
            pdfFormFields.SetField("guia", fac.ccomenv.cenv_guia1 + "-" + fac.ccomenv.cenv_guia2 + "-" + fac.ccomenv.cenv_guia3);
            pdfFormFields.SetField("politica", fac.ccomdoc.cdoc_politicanombre);
            pdfFormFields.SetField("entrega", fac.ccomenv.cenv_observacion);
            pdfFormFields.SetField("hojaruta", hojaruta);


            decimal subtotal = fac.total.tot_subtot_0 + fac.total.tot_subtotal;

            pdfFormFields.SetField("subtotal0", fac.total.tot_subtot_0.ToString("0.00"));
            pdfFormFields.SetField("subtotal12", fac.total.tot_subtotal.ToString("0.00"));
            pdfFormFields.SetField("subtotal", subtotal.ToString("0.00"));
            pdfFormFields.SetField("iva", fac.total.tot_porc_impuesto.ToString());
            pdfFormFields.SetField("valoriva", fac.total.tot_timpuesto.ToString("0.00"));
            pdfFormFields.SetField("total", fac.total.tot_total.ToString("0.00"));






            // report by reading values from completed PDF
            pdfStamper.FormFlattening = false;

            // close the pdf
            pdfStamper.Close();
            return fac.com_doctran + ".pdf";
        }

        public static string PdfFACGT(Comprobante fac, Formato formato, string hojaruta, string path, bool autoprint, string impresora)
        {
            Document doc = new Document(PageSize.A4);
            

            string pdfTemplate = path + @"\" + formato.for_pdf;
            string newFile = path + @"\" + fac.com_doctran + ".pdf";

            var output = new FileStream(newFile, FileMode.Create);
            var writer = PdfWriter.GetInstance(doc, output);


            doc.Open();

            iTextSharp.text.Font fntTableFontBold = FontFactory.GetFont("Arial", 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            iTextSharp.text.Font fntTableFont = FontFactory.GetFont("Arial", 8, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);


            PdfPTable table1 = new PdfPTable(2);
            table1.DefaultCell.Border = 0;
            table1.WidthPercentage = 80;


            PdfPCell cell11 = new PdfPCell();
            cell11.Colspan = 1;
            cell11.AddElement(new Paragraph("Cliente",fntTableFontBold));
            cell11.AddElement(new Paragraph(fac.ccomdoc.cdoc_nombre, fntTableFont));            

            table1.AddCell(cell11);

            doc.Add(table1);

            doc.Close();
            
            return fac.com_doctran + ".pdf";
        }



        public static string ComprobantePDF(int empresa, string comprobante, string path, bool autoprint, string impresora)
        {

            Comprobante fac = new Comprobante();
            fac.com_empresa_key = empresa;
            fac.com_codigo_key = Int64.Parse(comprobante);
            fac.com_empresa = empresa;
            fac.com_codigo = Int64.Parse(comprobante);
            fac = ComprobanteBLL.GetByPK(fac);

            fac.ccomdoc = new Ccomdoc();
            fac.ccomenv = new Ccomenv();
            fac.total = new Total();

            fac.ccomdoc.cdoc_comprobante = fac.com_codigo;
            fac.ccomdoc.cdoc_empresa = fac.com_empresa;
            fac.ccomdoc.cdoc_comprobante_key = fac.com_codigo;
            fac.ccomdoc.cdoc_empresa_key = fac.com_empresa;
            fac.ccomdoc = CcomdocBLL.GetByPK(fac.ccomdoc);

            fac.ccomenv.cenv_comprobante = fac.com_codigo;
            fac.ccomenv.cenv_empresa = fac.com_empresa;
            fac.ccomenv.cenv_comprobante_key = fac.com_codigo;
            fac.ccomenv.cenv_empresa_key = fac.com_empresa;
            fac.ccomenv = CcomenvBLL.GetByPK(fac.ccomenv);

            fac.total.tot_comprobante = fac.com_codigo;
            fac.total.tot_empresa = fac.com_empresa;
            fac.total.tot_comprobante_key = fac.com_codigo;
            fac.total.tot_empresa_key = fac.com_empresa;
            fac.total = TotalBLL.GetByPK(fac.total);

            fac.total.tot_subtot_0 += fac.total.tot_transporte;
            fac.total.tot_subtotal += (fac.total.tot_tseguro.HasValue) ? fac.total.tot_tseguro.Value : 0;

            int codigofac = 1;//Formato para Factura
            
            List<Planillacomprobante> planillacomp = PlanillacomprobanteBLL.GetAll(new WhereParams("pco_empresa={0} and pco_comprobante_fac={1}", fac.com_empresa, dac.com_codigo), "");
            if (planillacomp.Count > 0)
            {
                fac.planillacomp = planillacomp[0];
                codigofac = 2; //Formato para factura de planilla
            }

            Formato formato = FormatoBLL.GetByPK(new Formato { for_empresa = fac.com_empresa, for_empresa_key = fac.com_empresa, for_codigo = codigofac, for_codigo_key = codigofac });

            fac.rutafactura = RutaxfacturaBLL.GetAll(new WhereParams("rfac_comprobanteruta = {0} and rfac_empresa = {1}", fac.com_codigo, fac.com_empresa), "");
            fac.ccomdoc.detalle = DcomdocBLL.GetAll(new WhereParams("ddoc_comprobante = {0} and ddoc_empresa = {1}", fac.com_codigo, fac.com_empresa), "");

            fac.rutafactura = RutaxfacturaBLL.GetAll(new WhereParams("rfac_comprobantefac = {0} and rfac_empresa = {1}", fac.com_codigo, fac.com_empresa), "");

            string hojaruta = "";
            if (fac.rutafactura.Count > 0)
            {
                Comprobante hr = new Comprobante();
                hr.com_empresa = fac.com_empresa;
                hr.com_empresa_key = fac.com_empresa;
                hr.com_codigo = fac.rutafactura[0].rfac_comprobanteruta;
                hr.com_codigo_key = fac.rutafactura[0].rfac_comprobanteruta;
                hr = ComprobanteBLL.GetByPK(hr);
                hojaruta = hr.com_doctran;
            }
            if (formato.for_pdf == "FAC.pdf")
                return PdfFAC(fac, formato, hojaruta, path, autoprint, impresora);
            if (formato.for_pdf == "FACTC.pdf")//Planilla
                return PdfFACTC(fac, formato, hojaruta, path, autoprint, impresora);
            if (formato.for_pdf == "FACTC1.pdf")//Factura normal
                return PdfFACTC(fac, formato, hojaruta, path, autoprint, impresora);
            if (formato.for_pdf == "FACGT.pdf")
                return PdfFACGT(fac, formato, hojaruta, path, autoprint, impresora);

            return "";
           


        }
        

    }
}
